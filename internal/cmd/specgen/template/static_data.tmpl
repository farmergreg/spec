{{- define "static_data" }}
// Lookup look up a specification for {{ .CodeGen.CodeGenMetadata.DataType }}
func Lookup({{ .CodeGen.CodeGenMetadata.DataType | ToLower }} {{ .CodeGen.CodeGenMetadata.DataType }}) (Spec, bool) {
	spec, ok := internalMap[{{ .CodeGen.CodeGenMetadata.DataType | ToLower }}]
	return spec, ok
}

// LookupByFilter returns all {{ .CodeGen.CodeGenMetadata.DataType }} specifications that match the provided filter function.
func LookupByFilter(filter func(Spec) bool) []Spec {
	result := make([]Spec, 0)
	for _, v := range List() {
		if filter(v) {
			result = append(result, v)
		}
	}
	return result
}

// All {{ .CodeGen.CodeGenMetadata.DataType }} specifications INCLUDING those marked import only.
func List() []Spec {
	return []Spec {
	{{- range $key, $value := .CodeGen.CodeGenRecords }}
		{{- $metadata := $value.CodeGenMetadata }}
	internalMap[{{ $metadata.ConstName }}],
	{{- end }}
	}
}

// {{ .CodeGen.CodeGenMetadata.DataType }} specifications EXCLUDING those marked import only.
func ListActive() []Spec {
	return []Spec {
	{{- range $key, $value := .CodeGen.CodeGenRecords }}
		{{- if not $value.IsImportOnly }}
		{{- $metadata := $value.CodeGenMetadata }}
		internalMap[{{ $metadata.ConstName }}],
		{{- end }}
	{{- end }}
	}
}

var internalMap = map[{{ .CodeGen.CodeGenMetadata.DataType }}]Spec {
	{{- range $key, $value := .CodeGen.CodeGenRecords }}
		{{- $metadata := $value.CodeGenMetadata }}
		{{ $metadata.ConstName }}: {{ ToGoCode $value $.CodeGen.CodeGenMetadata.PackageName }},
	{{- end }}
}

{{- end }}
