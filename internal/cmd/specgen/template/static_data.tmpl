{{- define "static_data" }}
var (
	listActive     []Spec // listActive is a cached copy of the active specifications (those not marked as import-only).
	listActiveOnce sync.Once // listActive is lazy loaded instead of utilizing an init() function. This allows the compiler to remove unused data / variables.
)

// lookupList contains all known {{ .CodeGen.CodeGenMetadata.DataType }} specifications.
var lookupList = []Spec {
	{{- range $key, $value := .CodeGen.CodeGenRecords }}
		{{- $metadata := $value.CodeGenMetadata }}
		{{ ToGoCode $value $.CodeGen.CodeGenMetadata.PackageName }},
	{{- end }}
}

// lookupMap contains all known {{ .CodeGen.CodeGenMetadata.DataType }} specifications.
var lookupMap = map[{{ .CodeGen.CodeGenMetadata.DataType }}]*Spec {
	{{- $index := 0 }}
	{{- range $key, $value := .CodeGen.CodeGenRecords }}
		{{- $metadata := $value.CodeGenMetadata }}
		{{ $metadata.ConstName }}: &lookupList[{{ $index }}],
		{{- $index = Add $index 1 }}
	{{- end }}
}

// Lookup returns the specification for the provided {{ .CodeGen.CodeGenMetadata.DataType }}.
// ADIF {{ .Spec.Version }}
func Lookup({{ .CodeGen.CodeGenMetadata.DataType | ToLower }} {{ .CodeGen.CodeGenMetadata.DataType }}) (Spec, bool) {
	spec, ok := lookupMap[{{ .CodeGen.CodeGenMetadata.DataType | ToLower }}]
	if !ok {
		return Spec{}, false
	}
	return *spec, true
}

// LookupByFilter returns all {{ .CodeGen.CodeGenMetadata.DataType }} specifications that match the provided filter function.
// ADIF {{ .Spec.Version }}
func LookupByFilter(filter func(Spec) bool) []Spec {
	result := make([]Spec, 0, len(lookupList))
	for _, v := range lookupList {
		if filter(v) {
			result = append(result, v)
		}
	}
	return result
}

// List returns all {{ .CodeGen.CodeGenMetadata.DataType }} specifications.
// This list includes those marked import-only.
// ADIF {{ .Spec.Version }}
func List() []Spec {
	list := make([]Spec, len(lookupList))
	copy(list, lookupList)
	return list
}

// ListActive returns {{ .CodeGen.CodeGenMetadata.DataType }} specifications.
// This list excludes those marked as import-only.
// ADIF {{ .Spec.Version }}
func ListActive() []Spec {
	listActiveOnce.Do(func() {
		listActive = LookupByFilter(func(spec Spec) bool { return !bool(spec.IsImportOnly) })
	})

	result := make([]Spec, len(listActive))
    copy(result, listActive)
    return result
}
{{- end }}
