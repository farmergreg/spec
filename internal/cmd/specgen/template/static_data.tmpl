{{- define "static_data" }}
var (
	listActive     []Spec
	listActiveOnce sync.Once
)

// lookupList contains all known {{ .CodeGen.CodeGenMetadata.DataType }} specifications
var lookupList = []Spec {
	{{- range $key, $value := .CodeGen.CodeGenRecords }}
		{{- $metadata := $value.CodeGenMetadata }}
		{{ ToGoCode $value $.CodeGen.CodeGenMetadata.PackageName }},
	{{- end }}
}

// lookupMap contains all known {{ .CodeGen.CodeGenMetadata.DataType }} specifications
var lookupMap = map[{{ .CodeGen.CodeGenMetadata.DataType }}]*Spec {
	{{- $index := 0 }}
	{{- range $key, $value := .CodeGen.CodeGenRecords }}
		{{- $metadata := $value.CodeGenMetadata }}
		{{ $metadata.ConstName }}: &lookupList[{{ $index }}],
		{{- $index = Add $index 1 }}
	{{- end }}
}

// Lookup locates the ADIF {{ .Spec.Version }} specification for the provided {{ .CodeGen.CodeGenMetadata.DataType }}
func Lookup({{ .CodeGen.CodeGenMetadata.DataType | ToLower }} {{ .CodeGen.CodeGenMetadata.DataType }}) (Spec, bool) {
	spec, ok := lookupMap[{{ .CodeGen.CodeGenMetadata.DataType | ToLower }}]
	if !ok {
		return Spec{}, false
	}
	return *spec, true
}

// LookupByFilter returns all ADIF {{ .Spec.Version }} {{ .CodeGen.CodeGenMetadata.DataType }} specifications that match the provided filter function.
func LookupByFilter(filter func(Spec) bool) []Spec {
	result := make([]Spec, 0, len(lookupList))
	for _, v := range lookupList {
		if filter(v) {
			result = append(result, v)
		}
	}
	return result
}

// ListActive returns a slice of ADIF {{ .Spec.Version }} {{ .CodeGen.CodeGenMetadata.DataType }} specifications, but excludes those marked as import-only.
func ListActive() []Spec {
	listActiveOnce.Do(func() {
		listActive = LookupByFilter(func(spec Spec) bool { return !bool(spec.IsImportOnly) })
	})
	return listActive
}

// List returns a slice of all ADIF {{ .Spec.Version }} {{ .CodeGen.CodeGenMetadata.DataType }} specifications. This includes those marked import-only.
func List() []Spec {
	list := make([]Spec, len(lookupList))
	copy(list, lookupList)
	return list
}
{{- end }}
